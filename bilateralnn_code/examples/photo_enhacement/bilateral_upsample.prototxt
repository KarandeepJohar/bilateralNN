name: "VOC12"

### NETWORK ###

layer { 
  name: "data" 
  type: "ImageData" 
  top: "image_input"
  top: "image_label1" 
  image_data_param { 
    source: "input/file_list.txt" 
    batch_size: 10 
    new_height: 300 
    new_width: 300
  } 
} 

layer { 
  name: "data" 
  type: "ImageData" 
  top: "image_output"
  top: "image_label2" 
  image_data_param { 
    source: "bilateral/file_list.txt" 
    batch_size: 10 
    new_height: 300 
    new_width: 300
  } 
}



layer {
  name: "bilateral_features_out"
  type: "PixelFeature"
  bottom: "image_input"
  top: "bilateral_features_out"
  pixel_feature_param {
    type: POSITION_AND_RGB
    pos_scale: 1              # You need to validate these scales depending on your task, dataset and filter neighborhood size.
    color_scale: 1
  }
}



layer {
  name: "permutohedral1"
  type: "Permutohedral"
  bottom: "image_input"                # Input blob (low-resolution input)
  bottom: "bilateral_features_out"            # Input features (low-resolution guidance image)
  bottom: "bilateral_features_out"           # Output features (high-resolution guidance image)

  top: "image_upsampled"                     # Output filtered blob

  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  permutohedral_param {
    num_output: 3               # Number of filter banks == dimension of the output signal.
    group: 3                    # Number of convolutional groups (default is 1).
    neighborhood_size: 1        # Filter neighborhood size
    bias_term: true             # Whether to use bias term or not
    norm_type: AFTER            # SYMMENTRIC (default): Applies the signal normalization before and after the filtering;
                                # AFTER:                Applies the signal normalization after the filtering.
    offset_type: FULL           # FULL (default): Full Gaussian Offset;
                                # DIAG:           Diagonal Gaussian offset;
                                # NONE:           No offset.
    filter_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    } 
 }


}

layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "image_upsampled"
  bottom: "image_output"
  top: "loss"
}


### END ###
